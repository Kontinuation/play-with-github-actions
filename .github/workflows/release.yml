name: Release

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Release name'
        required: false
      overwrite:
        description: 'Overwrite existing release'
        type: boolean
        required: true
        default: false
      prerelease:
        description: 'Set as a pre-release'
        required: true
        type: boolean
        default: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'zulu'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Resolve version number
        id: resolve-version
        run: |
          export VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Project version number: $VERSION"
          if [ -z "$VERSION" ]; then
            echo "::error title=Resolve version number failed::Failed to obtain version number of this maven project"
          fi
          if [[ "$VERSION" == *"-SNAPSHOT" ]]; then
            echo "::error title=SNAPSHOT version detected::The version $VERSION is a snapshot version and should not be released"
            exit 1
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=v${VERSION}" >> "$GITHUB_OUTPUT"
    outputs:
      version: ${{ steps.resolve-version.outputs.version }}
      tag: ${{ steps.resolve-version.outputs.tag }}

  build-wheel:
    needs:
      - prepare
    uses: Kontinuation/play-with-github-actions/.github/workflows/wheel.yml@main

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs:
      - prepare
      - build-wheel
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'zulu'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install python dependencies
        run: python3 -m pip install requests

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Delete existing release if exists
        if: ${{ github.event.inputs.overwrite != 'false' }}
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          TAG: ${{ needs.prepare.outputs.tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e

          echo "Deleting release $TAG"
          python3 .github/workflows/scripts/delete_gh_release.py --tag $TAG
          if [ $? -ne 0 ]; then
            exit 1
          fi

          echo "Deleting tag $TAG"
          git tag -d $TAG || true
          git push --delete origin $TAG || true

      - name: Delete existing maven package
        if: ${{ github.event.inputs.overwrite != 'false' }}
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          TAG: ${{ needs.prepare.outputs.tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export GROUP_ID=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)
          echo "Finding all artifact IDs"
          find . -name pom.xml -execdir sh -c 'echo "$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)"' \; > artifact-list.txt
          cat artifact-list.txt | sed "s/^/${GROUP_ID}./" > package-list.txt

          echo "Packages to be deleted:"
          cat package-list.txt

          echo "Deleting package version $VERSION"
          python3 .github/workflows/scripts/delete_gh_packages.py --package-type maven --package-list package-list.txt --version $VERSION

      - name: Build and publish jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn --batch-mode deploy -DskipTests

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheels

      - name: Show files
        run: find .

      - name: Create tag
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          TAG: ${{ needs.prepare.outputs.tag }}
        run: |
          git tag $TAG
          git push origin $TAG

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event.inputs.name != '' && github.event.inputs.name || needs.prepare.outputs.tag }}
          tag_name: ${{ needs.prepare.outputs.tag }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: |
            target/*.jar
            wheels/*
            LICENSE
